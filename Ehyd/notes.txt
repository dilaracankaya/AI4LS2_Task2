
########################################################################################################################
# Yer alt? su seviyesi – 3792 *
# Yer alt? s?cakl?k – 1562 *
# Messstellen – 3792
#
# Ya?mur – 863 *
# Kar – 631 *
# Messstellen – 907
#
# Fahig iletkenlik – 90 *
# Schüt debi – 93 *
# Temp – 93 *
# messstellen – 93
#
# w-tages nehir seviyesi – 759 (iki csv'de data yok ama o yüzden 757 gelmeli) *
# wt-monat temp – 322 *
# schweb sediment – 35 *
# q tages debi - 625 *
# messstellen - 792
########################################################################################################################


Sources:
- Quellleitfahigkeit -  sularda ölçülen elektriksel iletkenlik (konduktans) bilgilerini içermektedir. µS/cm
# Failed to create DataFrame: Quellleitfähigkeit-Tagesmittel-396796.csv, error: could not convert string to float: 'rekonstruiert aus Version 3->'

- Quellshüttung - su debisi (ak?? h?z?) ölçümlerini içermektedir
# Failed to create DataFrame: Quellschüttung-Tagesmittel-396093.csv, error: could not convert string to float: 'F'

- Temperature
# Failed to create DataFrame: Quellwassertemperatur-Tagesmittel-396010.csv, error: could not convert string to float: 'K'


Surface Water:
- W – nehir su seviyesi
# Failed to create DataFrame: W-Tagesmittel-204388.csv, error: time data 'Invalid' does not match format '%d.%m.%Y %H:%M'
# Failed to create DataFrame: W-Tagesmittel-211078.csv, error: time data 'Invalid' does not match format '%d.%m.%Y %H:%M'
# data yok, k?zlardan biri de indirdikleri dosyalar? bir kontrol etsin

- Wt – su s?cakl???


- Schweb – sediment (Ask?da (çözünmü?) kat? madde miktar?, nehirdeki su ak???yla ta??nan küçük parçac?klar?n
(kum, kil, organik maddeler vb.) miktar?n? gösterir. Bu ölçümler, nehrin ta??d??? sediment miktar?n? anlamak ve nehir ekosisteminin durumunu de?erlendirmek için önemlidir.)


- Q – debi


- Gesch (az olan) - Yatak yükü, ask?da kat? maddeden farkl? olarak daha büyük parçac?klar?n hareketini temsil eder. Nehirlerin dibinde ta??n?r, akarsu ittire ittire ta??n?r gibi.



# in case
#########################################################################################################################3

# Tarihler aras?nda filtreleme yap
df_379313["Date"] = pd.to_datetime(df_379313["Date"])
# df_379313 = df_379313[(df_379313["Date"] >= "1980-12-01") & (df_379313["Date"] <= "2021-12-01")]



def set_day_to_first(df):
    df['Date'] = df['Date'].apply(lambda x: x.replace(day=1))
    return df

for df_name in df_379313_rain_list:  # bu, a?a?daki fonksiyon ile birle?tirilebilir
    df = globals().get(df_name)
    df = set_day_to_first(df)
    df = df[(df["Date"] >= "1980-12-01") & (df["Date"] <= "2021-12-01")]
    print(df.head())


def fill_missing_dates_nan(df, start_date="1980-12-01", end_date="2021-12-01"):
    # T?m tarih aral???n? olu?tur
    all_dates = pd.date_range(start=start_date, end=end_date, freq='MS')

    # Veri ?er?evesini t?m tarihlerle yeniden indeksleyin ve eksik de?erleri NaN yap?n
    df = df.set_index('Date').reindex(all_dates).reset_index()
    df.columns = ['Date'] + list(df.columns[1:])  # 'Date' kolonunu tekrar adland?r?n

    return df


for df_name in df_379313_rain_list:
    df = globals().get(df_name)
    if df is not None:
        df = fill_missing_dates_nan(df)
        globals()[df_name] = df
        print(df.head())




merge_list = [df_379313]
for df_name in df_379313_rain_list:
    df = globals().get(df_name)
    merge_list.append(df)


# merge
merged_df = merge_list[0]

# Listeyi gezerek t?m DataFrame'leri birle?tiriyoruz
for i, df in enumerate(merge_list[1:], start=1):
    # Her yeni DataFrame'den gelen kolonlara _i ekliyoruz
    suffixes = (None, f'_df{i}')
    merged_df = pd.merge(merged_df, df, on='Date', how='inner', suffixes=suffixes)



merged_df.columns = ['Date', 'df_379313', 'df_100933', 'df_100925', 'df_100404', 'df_100941', 'df_100412', 'df_100503', 'df_100883', 'df_115352', 'df_100370', 'df_100529']
merged_df.head()

# Lagged merged df

# Lag de?erini eklemek istedi?iniz kolonlar
cols_to_lag = ['df_100933', 'df_100925', 'df_100404', 'df_100941', 'df_100412', 'df_100503', 'df_100883', 'df_115352', 'df_100370', 'df_100529']

# Yeni bir veri ?er?evesi olu?tur
lagged_merged_df = merged_df.copy()

# Lag kolonlar?n? olu?tur
for col in cols_to_lag:
    lagged_merged_df[f'{col}_lag1'] = merged_df[col].shift(1)
    lagged_merged_df[f'{col}_lag2'] = merged_df[col].shift(2)

# Kolonlar? s?ralamak i?in ?nce lag1'ler ve sonra lag2'ler
# ?nce t?m kolonlar? listeleyin
lag1_cols = [f'{col}_lag1' for col in cols_to_lag]
lag2_cols = [f'{col}_lag2' for col in cols_to_lag]
merged_df_cols = merged_df.columns.to_list()

# Kolon s?ralamas?
new_order = merged_df_cols  + lag1_cols + lag2_cols

# Veri ?er?evesini yeni kolon s?ralamas?na g?re d?zenle
lagged_merged_df = lagged_merged_df[new_order]

# Sonu?lar? g?r?nt?leme
print(lagged_merged_df.head())

len(lagged_merged_df.columns)

# Heatmap
data = lagged_merged_df.iloc[:, -31:]
plt.figure(figsize=(20, 20))
dataplot = sns.heatmap(data.corr(), cmap="YlGnBu", annot=True, annot_kws={'size': 8})

# Grafi?i kaydetmek
plt.savefig("Ehyd/datasets_ehyd/heatmap_80s_with_nan_n_lags.png", bbox_inches='tight')

# Grafi?i g?stermek
plt.show()


merged_df.shape  # (493, 12)
merged_df.isnull().sum()
# merged_df.isnull().sum()
# Out[85]:
# Date           0
# df_379313     53
# df_100933    128
# df_100925    109
# df_100404      0
# df_100941    127
# df_100412      0
# df_100503      0
# df_100883    109
# df_115352    361
# df_100370      0
# df_100529      0
# dtype: int64


##### 720 dataframe'i olu?tururken çekti?im çile a?a??dad?r
# IMPORTS
import os
import ast
import warnings
import pandas as pd
from statsmodels.tools.sm_exceptions import ConvergenceWarning
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)
pd.set_option('display.float_format', lambda x: '%.3f' % x)
pd.set_option('display.max_colwidth', None)
pd.set_option('display.width', 500)
warnings.simplefilter('ignore', category=ConvergenceWarning)
import pandas as pd
from datetime import datetime
from scipy.spatial import distance
from collections import Counter
import itertools
import pickle
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense


# Pickle dosyalar?n? toplu açma i?lemi:
pkl_files = [f for f in os.listdir() if f.endswith('.pkl')]

for pkl_file in pkl_files:
    with open(pkl_file, 'rb') as file:
        var_name = pkl_file[:-4]
        globals()[var_name] = pickle.load(file)

data = pd.read_csv("data.csv")



#######################################################################
# globals kulland???m?z için k?rm?z?lar
# sözlüklerin içindeki serileri dataframe yap?yorum.
dict_list = [filled_conductivity_dict, filled_data_gw_temp_dict, filled_groundwater_dict, filled_rain_dict,
             filled_sediment_dict_monthly, filled_snow_dict_monthly, filled_source_flow_rate_dict,
             filled_source_temp_dict, filled_surface_water_flow_rate_dict_monthly,
             filled_surface_water_level_dict_monthly, filled_surface_water_temp_dict]


# Dict list içindeki her bir sözlü?ün value'lar?n? DataFrame yapacak fonksiyon
def convert_series_to_dataframe(d):
    for key in d:
        d[key] = d[key].to_frame(name=key)
    return d

for i in range(len(dict_list)):
    dict_list[i] = convert_series_to_dataframe(dict_list[i])


# Lag ve rolling mean hesaplamalar?n? gerçekle?tirecek fonksiyon
def add_lag_and_rolling_mean(df, window=6):
    # ?lk sütunun ad?n? al
    column_name = df.columns[0]
    # 1 lag'li versiyonu ekle
    df[f'lag_1'] = df[column_name].shift(1)
    # Lag'li ve rolling mean sütunlar?n? ekle
    for i in range(1, 2):  # Burada 1 lag'li oldu?u için range(1, 2) kullan?yoruz.
        df[f'rolling_mean_{window}_lag_{i}'] = df[column_name].shift(i).rolling(window=window).mean()
    return df


for d in dict_list:
    for key, df in d.items():
        d[key] = add_lag_and_rolling_mean(df)

# zero padding
def zero_padding(df, start_date='1960-01-01'):
    # E?er indeks zaten PeriodIndex de?ilse, to_period('M') yap
    if not isinstance(df.index, pd.PeriodIndex):
        df.index = df.index.to_period('M')

    # Belirlenen ba?lang?ç tarihi
    start_date = pd.to_datetime(start_date).to_period('M')

    # Tarih aral???n? geni?let
    all_dates = pd.period_range(start=start_date, end=df.index.max(), freq='M')

    # Yeni tarih aral??? için bo? bir veri çerçevesi olu?tur
    new_df = pd.DataFrame(index=all_dates)

    # Eski veri çerçevesini yeni veri çerçevesine birle?tir
    new_df = new_df.join(df, how='left').fillna(0)

    # Periyotlar? datetime'e dönü?tür
    new_df.index = new_df.index.to_timestamp()

    return new_df

# Her bir sözlükteki veri çerçevelerini güncelleme
for dictionary in dict_list:
    for key in dictionary:
        dictionary[key] = zero_padding(dictionary[key])


###############
# 11 sözlükteki tüm dataframe'lerin tüm kolonlar?n? float32'ye çevirme
def convert_to_float32(df):
    return df.astype('float32')

# Her bir sözlükteki veri çerçevelerini veri tipini float32'ye çevirme
for dictionary in dict_list:
    for key in dictionary:
        # Veri tipini float32'ye çevir
        dictionary[key] = convert_to_float32(dictionary[key])


# ocak 1960 dataframe
# data isimli DataFrame'in hzbnr01 kolonunu al
index_values = data['hzbnr01']

# hzbnr01 de?erlerini indeks olarak kullanan bo? bir DataFrame olu?tur
new_df = pd.DataFrame(index=index_values)


# todo otomatikle?tirece?imiz yer buras?, ben sadece 1960 ocak'? için yapt?m bunlar?
# GROUNDWATER
# Yeni kolonlar? ba?lat?yoruz
new_df['gw_level'] = None
new_df['gw_level_lag_1'] = None
new_df['gw_level_rolling_mean_6_lag_1'] = None

# Tüm indekslerde dola??yoruz
for index in new_df.index:
    # ?ndeksi string'e çeviriyoruz
    str_index = str(index)

    # E?er sözlükte anahtar mevcutsa, ilgili DataFrame'i al?yoruz
    if str_index in filled_groundwater_dict:
        relevant_df = filled_groundwater_dict[str_index]

        # ?lk sat?rdaki tüm de?erleri al?yoruz
        first_row = relevant_df.iloc[0]

        # Bu de?erleri new_df'deki ilgili sat?rlara ekliyoruz
        new_df.at[index, 'gw_level'] = first_row.iloc[0]  # ?lk kolonun de?eri
        new_df.at[index, 'gw_level_lag_1'] = first_row.iloc[1]  # ?kinci kolonun de?eri
        new_df.at[index, 'gw_level_rolling_mean_6_lag_1'] = first_row.iloc[2]  # Üçüncü kolonun de?eri
    else:
        # Sözlükte anahtar bulunmazsa hata mesaj? yazd?r?yoruz
        print(f"Warning: Key '{str_index}' not found in filled_groundwater_dict")

# GROUNDWATER TEMPERATURE

# Yeni kolonlar? ba?lat?yoruz
new_df['gw_temp'] = None
new_df['gw_temp_lag_1'] = None
new_df['gw_temp_rolling_mean_6_lag_1'] = None

# Tüm indekslerde dola??yoruz
for index in new_df.index:
    # data DataFrame'inde hzbnr01 ile e?le?en nearest_gw_temp listesini al?yoruz
    nearest_gw_temp_str = data.loc[data['hzbnr01'] == index, 'nearest_gw_temp'].values

    # E?er nearest_gw_temp_str bo? de?ilse
    if len(nearest_gw_temp_str) > 0:
        # nearest_gw_temp listesinin string de?erini gerçek listeye dönü?türüyoruz
        nearest_gw_temp_list = ast.literal_eval(nearest_gw_temp_str[0])  # Stringi listeye dönü?türüyoruz

        # nearest_gw_temp listesinin tek eleman?n? al?yoruz
        if len(nearest_gw_temp_list) > 0:
            str_index = str(nearest_gw_temp_list[0])  # Tek eleman? string'e çeviriyoruz

            # Tek eleman için
            if str_index in filled_data_gw_temp_dict:
                relevant_temp_df = filled_data_gw_temp_dict[str_index]
                if len(relevant_temp_df) > 0:
                    new_df.at[index, 'gw_temp'] = relevant_temp_df.iloc[0, 0]  # ?lk sat?r?n ilk kolon de?eri
                if len(relevant_temp_df.columns) > 1 and len(relevant_temp_df) > 0:
                    new_df.at[index, 'gw_temp_lag_1'] = relevant_temp_df.iloc[0, 1]  # ?lk sat?r?n ikinci kolon de?eri
                if len(relevant_temp_df.columns) > 2 and len(relevant_temp_df) > 0:
                    new_df.at[index, 'gw_temp_rolling_mean_6_lag_1'] = relevant_temp_df.iloc[
                        0, 2]  # ?lk sat?r?n üçüncü kolon de?eri
            else:
                print(f"Warning: Key '{str_index}' not found in filled_data_gw_temp_dict")
    else:
        print(f"Warning: No nearest_gw_temp list found for index '{index}'")



# RAIN
# Yeni kolonlar? ba?lat?yoruz
new_df['first_rain'] = None
new_df['first_rain_lag_1'] = None
new_df['first_rain_rolling_mean_6_lag_1'] = None
new_df['second_rain'] = None
new_df['second_rain_lag_1'] = None
new_df['second_rain_rolling_mean_6_lag_1'] = None
new_df['third_rain'] = None
new_df['third_rain_lag_1'] = None
new_df['third_rain_rolling_mean_6_lag_1'] = None

# Tüm indekslerde dola??yoruz
for index in new_df.index:
    # data DataFrame'inde hzbnr01 ile e?le?en nearest_rain listesini al?yoruz
    nearest_rain_str = data.loc[data['hzbnr01'] == index, 'nearest_rain'].values

    # E?er nearest_rain_str bo? de?ilse
    if len(nearest_rain_str) > 0:
        # nearest_rain listesinin string de?erini gerçek listeye dönü?türüyoruz
        nearest_rain_list = ast.literal_eval(nearest_rain_str[0])  # Stringi listeye dönü?türüyoruz

        # nearest_rain listesinin ilk, ikinci ve üçüncü elemanlar?n? al?yoruz
        if len(nearest_rain_list) > 0:
            str_index_first = str(nearest_rain_list[0])  # ?lk eleman? string'e çeviriyoruz
            str_index_second = str(nearest_rain_list[1])  # ?kinci eleman? string'e çeviriyoruz
            str_index_third = str(nearest_rain_list[2])  # Üçüncü eleman? string'e çeviriyoruz

            # ?lk eleman için
            if str_index_first in filled_rain_dict:
                relevant_rain_df_first = filled_rain_dict[str_index_first]
                if len(relevant_rain_df_first) > 0:
                    new_df.at[index, 'first_rain'] = relevant_rain_df_first.iloc[0, 0]  # ?lk sat?r?n ilk kolon de?eri
                if len(relevant_rain_df_first.columns) > 1 and len(relevant_rain_df_first) > 0:
                    new_df.at[index, 'first_rain_lag_1'] = relevant_rain_df_first.iloc[
                        0, 1]  # ?lk sat?r?n ikinci kolon de?eri
                if len(relevant_rain_df_first.columns) > 2 and len(relevant_rain_df_first) > 0:
                    new_df.at[index, 'first_rain_rolling_mean_6_lag_1'] = relevant_rain_df_first.iloc[
                        0, 2]  # ?lk sat?r?n üçüncü kolon de?eri
            else:
                print(f"Warning: Key '{str_index_first}' not found in filled_rain_dict")

            # ?kinci eleman için
            if str_index_second in filled_rain_dict:
                relevant_rain_df_second = filled_rain_dict[str_index_second]
                if len(relevant_rain_df_second) > 0:
                    new_df.at[index, 'second_rain'] = relevant_rain_df_second.iloc[0, 0]  # ?lk sat?r?n ilk kolon de?eri
                if len(relevant_rain_df_second.columns) > 1 and len(relevant_rain_df_second) > 0:
                    new_df.at[index, 'second_rain_lag_1'] = relevant_rain_df_second.iloc[
                        0, 1]  # ?lk sat?r?n ikinci kolon de?eri
                if len(relevant_rain_df_second.columns) > 2 and len(relevant_rain_df_second) > 0:
                    new_df.at[index, 'second_rain_rolling_mean_6_lag_1'] = relevant_rain_df_second.iloc[
                        0, 2]  # ?lk sat?r?n üçüncü kolon de?eri
            else:
                print(f"Warning: Key '{str_index_second}' not found in filled_rain_dict")

            # Üçüncü eleman için
            if str_index_third in filled_rain_dict:
                relevant_rain_df_third = filled_rain_dict[str_index_third]
                if len(relevant_rain_df_third) > 0:
                    new_df.at[index, 'third_rain'] = relevant_rain_df_third.iloc[0, 0]  # ?lk sat?r?n ilk kolon de?eri
                if len(relevant_rain_df_third.columns) > 1 and len(relevant_rain_df_third) > 0:
                    new_df.at[index, 'third_rain_lag_1'] = relevant_rain_df_third.iloc[
                        0, 1]  # ?lk sat?r?n ikinci kolon de?eri
                if len(relevant_rain_df_third.columns) > 2 and len(relevant_rain_df_third) > 0:
                    new_df.at[index, 'third_rain_rolling_mean_6_lag_1'] = relevant_rain_df_third.iloc[
                        0, 2]  # ?lk sat?r?n üçüncü kolon de?eri
            else:
                print(f"Warning: Key '{str_index_third}' not found in filled_rain_dict")
    else:
        print(f"Warning: No nearest_rain list found for index '{index}'")

# SNOW
# Yeni kolonlar? ba?lat?yoruz
new_df['first_snow'] = None
new_df['first_snow_lag_1'] = None
new_df['first_snow_rolling_mean_6_lag_1'] = None
new_df['second_snow'] = None
new_df['second_snow_lag_1'] = None
new_df['second_snow_rolling_mean_6_lag_1'] = None
new_df['third_snow'] = None
new_df['third_snow_lag_1'] = None
new_df['third_snow_rolling_mean_6_lag_1'] = None

# Tüm indekslerde dola??yoruz
for index in new_df.index:
    # data DataFrame'inde hzbnr01 ile e?le?en nearest_snow listesini al?yoruz
    nearest_snow_str = data.loc[data['hzbnr01'] == index, 'nearest_snow'].values

    # E?er nearest_snow_str bo? de?ilse
    if len(nearest_snow_str) > 0:
        # nearest_snow listesinin string de?erini gerçek listeye dönü?türüyoruz
        nearest_snow_list = ast.literal_eval(nearest_snow_str[0])  # Stringi listeye dönü?türüyoruz

        # nearest_snow listesinin ilk, ikinci ve üçüncü elemanlar?n? al?yoruz
        if len(nearest_snow_list) > 0:
            str_index_first = str(nearest_snow_list[0])  # ?lk eleman? string'e çeviriyoruz
            str_index_second = str(nearest_snow_list[1])  # ?kinci eleman? string'e çeviriyoruz
            str_index_third = str(nearest_snow_list[2])  # Üçüncü eleman? string'e çeviriyoruz

            # ?lk eleman için
            if str_index_first in filled_snow_dict_monthly:
                relevant_snow_df_first = filled_snow_dict_monthly[str_index_first]
                if len(relevant_snow_df_first) > 0:
                    new_df.at[index, 'first_snow'] = relevant_snow_df_first.iloc[0, 0]  # ?lk sat?r?n ilk kolon de?eri
                if len(relevant_snow_df_first.columns) > 1 and len(relevant_snow_df_first) > 0:
                    new_df.at[index, 'first_snow_lag_1'] = relevant_snow_df_first.iloc[
                        0, 1]  # ?lk sat?r?n ikinci kolon de?eri
                if len(relevant_snow_df_first.columns) > 2 and len(relevant_snow_df_first) > 0:
                    new_df.at[index, 'first_snow_rolling_mean_6_lag_1'] = relevant_snow_df_first.iloc[
                        0, 2]  # ?lk sat?r?n üçüncü kolon de?eri
            else:
                print(f"Warning: Key '{str_index_first}' not found in filled_snow_dict_monthly")

            # ?kinci eleman için
            if str_index_second in filled_snow_dict_monthly:
                relevant_snow_df_second = filled_snow_dict_monthly[str_index_second]
                if len(relevant_snow_df_second) > 0:
                    new_df.at[index, 'second_snow'] = relevant_snow_df_second.iloc[0, 0]  # ?lk sat?r?n ilk kolon de?eri
                if len(relevant_snow_df_second.columns) > 1 and len(relevant_snow_df_second) > 0:
                    new_df.at[index, 'second_snow_lag_1'] = relevant_snow_df_second.iloc[
                        0, 1]  # ?lk sat?r?n ikinci kolon de?eri
                if len(relevant_snow_df_second.columns) > 2 and len(relevant_snow_df_second) > 0:
                    new_df.at[index, 'second_snow_rolling_mean_6_lag_1'] = relevant_snow_df_second.iloc[
                        0, 2]  # ?lk sat?r?n üçüncü kolon de?eri
            else:
                print(f"Warning: Key '{str_index_second}' not found in filled_snow_dict_monthly")

            # Üçüncü eleman için
            if str_index_third in filled_snow_dict_monthly:
                relevant_snow_df_third = filled_snow_dict_monthly[str_index_third]
                if len(relevant_snow_df_third) > 0:
                    new_df.at[index, 'third_snow'] = relevant_snow_df_third.iloc[0, 0]  # ?lk sat?r?n ilk kolon de?eri
                if len(relevant_snow_df_third.columns) > 1 and len(relevant_snow_df_third) > 0:
                    new_df.at[index, 'third_snow_lag_1'] = relevant_snow_df_third.iloc[
                        0, 1]  # ?lk sat?r?n ikinci kolon de?eri
                if len(relevant_snow_df_third.columns) > 2 and len(relevant_snow_df_third) > 0:
                    new_df.at[index, 'third_snow_rolling_mean_6_lag_1'] = relevant_snow_df_third.iloc[
                        0, 2]  # ?lk sat?r?n üçüncü kolon de?eri
            else:
                print(f"Warning: Key '{str_index_third}' not found in filled_snow_dict_monthly")
    else:
        print(f"Warning: No nearest_snow list found for index '{index}'")

# CONDUCTIVITY
# Yeni kolonlar? ba?lat?yoruz
new_df['conductivity'] = None
new_df['conductivity_lag_1'] = None
new_df['conductivity_rolling_mean_6_lag_1'] = None

# Tüm indekslerde dola??yoruz
for index in new_df.index:
    # data DataFrame'inde hzbnr01 ile e?le?en nearest_conductivity listesini al?yoruz
    nearest_conductivity_str = data.loc[data['hzbnr01'] == index, 'nearest_conductivity'].values

    # E?er nearest_conductivity_str bo? de?ilse
    if len(nearest_conductivity_str) > 0:
        # nearest_conductivity listesinin string de?erini gerçek listeye dönü?türüyoruz
        nearest_conductivity_list = ast.literal_eval(nearest_conductivity_str[0])  # Stringi listeye dönü?türüyoruz

        # nearest_conductivity listesinin tek eleman?n? al?yoruz
        if len(nearest_conductivity_list) > 0:
            str_index = str(nearest_conductivity_list[0])  # Tek eleman? string'e çeviriyoruz

            # Tek eleman için
            if str_index in filled_conductivity_dict:
                relevant_conductivity_df = filled_conductivity_dict[str_index]
                if len(relevant_conductivity_df) > 0:
                    new_df.at[index, 'conductivity'] = relevant_conductivity_df.iloc[0, 0]  # ?lk sat?r?n ilk kolon de?eri
                if len(relevant_conductivity_df.columns) > 1 and len(relevant_conductivity_df) > 0:
                    new_df.at[index, 'conductivity_lag_1'] = relevant_conductivity_df.iloc[
                        0, 1]  # ?lk sat?r?n ikinci kolon de?eri
                if len(relevant_conductivity_df.columns) > 2 and len(relevant_conductivity_df) > 0:
                    new_df.at[index, 'conductivity_rolling_mean_6_lag_1'] = relevant_conductivity_df.iloc[
                        0, 2]  # ?lk sat?r?n üçüncü kolon de?eri
            else:
                print(f"Warning: Key '{str_index}' not found in filled_conductivity_dict")
    else:
        print(f"Warning: No nearest_conductivity list found for index '{index}'")

# SOURCE FLOW RATE
import ast

# Yeni kolonlar? ba?lat?yoruz
new_df['source_flow_rate'] = None
new_df['source_flow_rate_lag_1'] = None
new_df['source_flow_rate_rolling_mean_6_lag_1'] = None

# Tüm indekslerde dola??yoruz
for index in new_df.index:
    # data DataFrame'inde hzbnr01 ile e?le?en nearest_source_fr listesini al?yoruz
    nearest_source_fr_str = data.loc[data['hzbnr01'] == index, 'nearest_source_fr'].values

    # E?er nearest_source_fr_str bo? de?ilse
    if len(nearest_source_fr_str) > 0:
        # nearest_source_fr listesinin string de?erini gerçek listeye dönü?türüyoruz
        nearest_source_fr_list = ast.literal_eval(nearest_source_fr_str[0])  # Stringi listeye dönü?türüyoruz

        # nearest_source_fr listesinin tek eleman?n? al?yoruz
        if len(nearest_source_fr_list) > 0:
            str_index = str(nearest_source_fr_list[0])  # Tek eleman? string'e çeviriyoruz

            # Tek eleman için
            if str_index in filled_source_flow_rate_dict:
                relevant_flow_rate_df = filled_source_flow_rate_dict[str_index]
                if len(relevant_flow_rate_df) > 0:
                    new_df.at[index, 'source_flow_rate'] = relevant_flow_rate_df.iloc[0, 0]  # ?lk sat?r?n ilk kolon de?eri
                if len(relevant_flow_rate_df.columns) > 1 and len(relevant_flow_rate_df) > 0:
                    new_df.at[index, 'source_flow_rate_lag_1'] = relevant_flow_rate_df.iloc[0, 1]  # ?lk sat?r?n ikinci kolon de?eri
                if len(relevant_flow_rate_df.columns) > 2 and len(relevant_flow_rate_df) > 0:
                    new_df.at[index, 'source_flow_rate_rolling_mean_6_lag_1'] = relevant_flow_rate_df.iloc[
                        0, 2]  # ?lk sat?r?n üçüncü kolon de?eri
            else:
                print(f"Warning: Key '{str_index}' not found in filled_source_flow_rate_dict")
    else:
        print(f"Warning: No nearest_source_fr list found for index '{index}'")

# SOURCE TEMP
# Yeni kolonlar? ba?lat?yoruz
new_df['source_temp'] = None
new_df['source_temp_lag_1'] = None
new_df['source_temp_rolling_mean_6_lag_1'] = None

# Tüm indekslerde dola??yoruz
for index in new_df.index:
    # data DataFrame'inde hzbnr01 ile e?le?en nearest_source_temp listesini al?yoruz
    nearest_source_temp_str = data.loc[data['hzbnr01'] == index, 'nearest_source_temp'].values

    # E?er nearest_source_temp_str bo? de?ilse
    if len(nearest_source_temp_str) > 0:
        # nearest_source_temp listesinin string de?erini gerçek listeye dönü?türüyoruz
        nearest_source_temp_list = ast.literal_eval(nearest_source_temp_str[0])  # Stringi listeye dönü?türüyoruz

        # nearest_source_temp listesinin tek eleman?n? al?yoruz
        if len(nearest_source_temp_list) > 0:
            str_index = str(nearest_source_temp_list[0])  # Tek eleman? string'e çeviriyoruz

            # Tek eleman için
            if str_index in filled_source_temp_dict:
                relevant_temp_df = filled_source_temp_dict[str_index]
                if len(relevant_temp_df) > 0:
                    new_df.at[index, 'source_temp'] = relevant_temp_df.iloc[0, 0]  # ?lk sat?r?n ilk kolon de?eri
                if len(relevant_temp_df.columns) > 1 and len(relevant_temp_df) > 0:
                    new_df.at[index, 'source_temp_lag_1'] = relevant_temp_df.iloc[0, 1]  # ?lk sat?r?n ikinci kolon de?eri
                if len(relevant_temp_df.columns) > 2 and len(relevant_temp_df) > 0:
                    new_df.at[index, 'source_temp_rolling_mean_6_lag_1'] = relevant_temp_df.iloc[
                        0, 2]  # ?lk sat?r?n üçüncü kolon de?eri
            else:
                print(f"Warning: Key '{str_index}' not found in filled_source_temp_dict")
    else:
        print(f"Warning: No nearest_source_temp list found for index '{index}'")

# SURFACE WATER TEMP
# Yeni kolonlar? ba?lat?yoruz
new_df['owf_temp'] = None
new_df['owf_temp_lag_1'] = None
new_df['owf_temp_rolling_mean_6_lag_1'] = None

# Tüm indekslerde dola??yoruz
for index in new_df.index:
    # data DataFrame'inde hzbnr01 ile e?le?en nearest_owf_temp listesini al?yoruz
    nearest_owf_temp_str = data.loc[data['hzbnr01'] == index, 'nearest_owf_temp'].values

    # E?er nearest_owf_temp_str bo? de?ilse
    if len(nearest_owf_temp_str) > 0:
        # nearest_owf_temp listesinin string de?erini gerçek listeye dönü?türüyoruz
        nearest_owf_temp_list = ast.literal_eval(nearest_owf_temp_str[0])  # Stringi listeye dönü?türüyoruz

        # nearest_owf_temp listesinin tek eleman?n? al?yoruz
        if len(nearest_owf_temp_list) > 0:
            str_index = str(nearest_owf_temp_list[0])  # Tek eleman? string'e çeviriyoruz

            # Tek eleman için
            if str_index in filled_surface_water_temp_dict:
                relevant_temp_df = filled_surface_water_temp_dict[str_index]
                if len(relevant_temp_df) > 0:
                    new_df.at[index, 'owf_temp'] = relevant_temp_df.iloc[0, 0]  # ?lk sat?r?n ilk kolon de?eri
                if len(relevant_temp_df.columns) > 1 and len(relevant_temp_df) > 0:
                    new_df.at[index, 'owf_temp_lag_1'] = relevant_temp_df.iloc[0, 1]  # ?lk sat?r?n ikinci kolon de?eri
                if len(relevant_temp_df.columns) > 2 and len(relevant_temp_df) > 0:
                    new_df.at[index, 'owf_temp_rolling_mean_6_lag_1'] = relevant_temp_df.iloc[
                        0, 2]  # ?lk sat?r?n üçüncü kolon de?eri
            else:
                print(f"Warning: Key '{str_index}' not found in filled_surface_water_temp_dict")
    else:
        print(f"Warning: No nearest_owf_temp list found for index '{index}'")

# SED?MENT
# Yeni kolonlar? ba?lat?yoruz
new_df['sediment'] = None
new_df['sediment_lag_1'] = None
new_df['sediment_rolling_mean_6_lag_1'] = None

# Tüm indekslerde dola??yoruz
for index in new_df.index:
    # data DataFrame'inde hzbnr01 ile e?le?en nearest_sediment listesini al?yoruz
    nearest_sediment_str = data.loc[data['hzbnr01'] == index, 'nearest_sediment'].values

    # E?er nearest_sediment_str bo? de?ilse
    if len(nearest_sediment_str) > 0:
        # nearest_sediment listesinin string de?erini gerçek listeye dönü?türüyoruz
        nearest_sediment_list = ast.literal_eval(nearest_sediment_str[0])  # Stringi listeye dönü?türüyoruz

        # nearest_sediment listesinin tek eleman?n? al?yoruz
        if len(nearest_sediment_list) > 0:
            str_index = str(nearest_sediment_list[0])  # Tek eleman? string'e çeviriyoruz

            # Tek eleman için
            if str_index in filled_sediment_dict_monthly:
                relevant_sediment_df = filled_sediment_dict_monthly[str_index]
                if len(relevant_sediment_df) > 0:
                    new_df.at[index, 'sediment'] = relevant_sediment_df.iloc[0, 0]  # ?lk sat?r?n ilk kolon de?eri
                if len(relevant_sediment_df.columns) > 1 and len(relevant_sediment_df) > 0:
                    new_df.at[index, 'sediment_lag_1'] = relevant_sediment_df.iloc[0, 1]  # ?lk sat?r?n ikinci kolon de?eri
                if len(relevant_sediment_df.columns) > 2 and len(relevant_sediment_df) > 0:
                    new_df.at[index, 'sediment_rolling_mean_6_lag_1'] = relevant_sediment_df.iloc[
                        0, 2]  # ?lk sat?r?n üçüncü kolon de?eri
            else:
                print(f"Warning: Key '{str_index}' not found in filled_sediment_dict_monthly")
    else:
        print(f"Warning: No nearest_sediment list found for index '{index}'")

# SURFACE WATER LEVEL
import ast

# Yeni sütunlar? ekliyoruz
new_df['first_owf_level'] = None
new_df['first_owf_level_lag_1'] = None
new_df['first_owf_level_rolling_mean_6_lag_1'] = None
new_df['second_owf_level'] = None
new_df['second_owf_level_lag_1'] = None
new_df['second_owf_level_rolling_mean_6_lag_1'] = None
new_df['third_owf_level'] = None
new_df['third_owf_level_lag_1'] = None
new_df['third_owf_level_rolling_mean_6_lag_1'] = None

# Tüm indekslerde dola??yoruz
for index in new_df.index:
    # data DataFrame'inde hzbnr01 ile e?le?en nearest_owf_level listesini al?yoruz
    nearest_owf_level_str = data.loc[data['hzbnr01'] == index, 'nearest_owf_level'].values

    # E?er nearest_owf_level_str bo? de?ilse
    if len(nearest_owf_level_str) > 0:
        # nearest_owf_level listesinin string de?erini gerçek listeye dönü?türüyoruz
        nearest_owf_level_list = ast.literal_eval(nearest_owf_level_str[0])  # Stringi listeye dönü?türüyoruz

        # nearest_owf_level listesinin ilk, ikinci ve üçüncü elemanlar?n? al?yoruz
        if len(nearest_owf_level_list) > 0:
            str_index_first = str(nearest_owf_level_list[0])  # ?lk eleman? string'e çeviriyoruz
            str_index_second = str(nearest_owf_level_list[1])  # ?kinci eleman? string'e çeviriyoruz
            str_index_third = str(nearest_owf_level_list[2])  # Üçüncü eleman? string'e çeviriyoruz

            # ?lk eleman için
            if str_index_first in filled_surface_water_level_dict_monthly:
                relevant_owf_level_df_first = filled_surface_water_level_dict_monthly[str_index_first]
                if len(relevant_owf_level_df_first) > 0:
                    new_df.at[index, 'first_owf_level'] = relevant_owf_level_df_first.iloc[0, 0]  # ?lk sat?r?n ilk kolon de?eri
                if len(relevant_owf_level_df_first.columns) > 1 and len(relevant_owf_level_df_first) > 0:
                    new_df.at[index, 'first_owf_level_lag_1'] = relevant_owf_level_df_first.iloc[
                        0, 1]  # ?lk sat?r?n ikinci kolon de?eri
                if len(relevant_owf_level_df_first.columns) > 2 and len(relevant_owf_level_df_first) > 0:
                    new_df.at[index, 'first_owf_level_rolling_mean_6_lag_1'] = relevant_owf_level_df_first.iloc[
                        0, 2]  # ?lk sat?r?n üçüncü kolon de?eri
            else:
                print(f"Warning: Key '{str_index_first}' not found in filled_surface_water_level_dict_monthly")

            # ?kinci eleman için
            if str_index_second in filled_surface_water_level_dict_monthly:
                relevant_owf_level_df_second = filled_surface_water_level_dict_monthly[str_index_second]
                if len(relevant_owf_level_df_second) > 0:
                    new_df.at[index, 'second_owf_level'] = relevant_owf_level_df_second.iloc[0, 0]  # ?lk sat?r?n ilk kolon de?eri
                if len(relevant_owf_level_df_second.columns) > 1 and len(relevant_owf_level_df_second) > 0:
                    new_df.at[index, 'second_owf_level_lag_1'] = relevant_owf_level_df_second.iloc[
                        0, 1]  # ?lk sat?r?n ikinci kolon de?eri
                if len(relevant_owf_level_df_second.columns) > 2 and len(relevant_owf_level_df_second) > 0:
                    new_df.at[index, 'second_owf_level_rolling_mean_6_lag_1'] = relevant_owf_level_df_second.iloc[
                        0, 2]  # ?lk sat?r?n üçüncü kolon de?eri
            else:
                print(f"Warning: Key '{str_index_second}' not found in filled_surface_water_level_dict_monthly")

            # Üçüncü eleman için
            if str_index_third in filled_surface_water_level_dict_monthly:
                relevant_owf_level_df_third = filled_surface_water_level_dict_monthly[str_index_third]
                if len(relevant_owf_level_df_third) > 0:
                    new_df.at[index, 'third_owf_level'] = relevant_owf_level_df_third.iloc[0, 0]  # ?lk sat?r?n ilk kolon de?eri
                if len(relevant_owf_level_df_third.columns) > 1 and len(relevant_owf_level_df_third) > 0:
                    new_df.at[index, 'third_owf_level_lag_1'] = relevant_owf_level_df_third.iloc[
                        0, 1]  # ?lk sat?r?n ikinci kolon de?eri
                if len(relevant_owf_level_df_third.columns) > 2 and len(relevant_owf_level_df_third) > 0:
                    new_df.at[index, 'third_owf_level_rolling_mean_6_lag_1'] = relevant_owf_level_df_third.iloc[
                        0, 2]  # ?lk sat?r?n üçüncü kolon de?eri
            else:
                print(f"Warning: Key '{str_index_third}' not found in filled_surface_water_level_dict_monthly")
    else:
        print(f"Warning: No nearest_owf_level list found for index '{index}'")

# SURFACE WATER FLOW RATE
# Yeni sütunlar? ekliyoruz
new_df['first_owf_fr'] = None
new_df['first_owf_fr_lag_1'] = None
new_df['first_owf_fr_rolling_mean_6_lag_1'] = None
new_df['second_owf_fr'] = None
new_df['second_owf_fr_lag_1'] = None
new_df['second_owf_fr_rolling_mean_6_lag_1'] = None
new_df['third_owf_fr'] = None
new_df['third_owf_fr_lag_1'] = None
new_df['third_owf_fr_rolling_mean_6_lag_1'] = None

# Tüm indekslerde dola??yoruz
for index in new_df.index:
    # data DataFrame'inde hzbnr01 ile e?le?en nearest_owf_fr listesini al?yoruz
    nearest_owf_fr_str = data.loc[data['hzbnr01'] == index, 'nearest_owf_fr'].values

    # E?er nearest_owf_fr_str bo? de?ilse
    if len(nearest_owf_fr_str) > 0:
        # nearest_owf_fr listesinin string de?erini gerçek listeye dönü?türüyoruz
        nearest_owf_fr_list = ast.literal_eval(nearest_owf_fr_str[0])  # Stringi listeye dönü?türüyoruz

        # nearest_owf_fr listesinin ilk, ikinci ve üçüncü elemanlar?n? al?yoruz
        if len(nearest_owf_fr_list) > 0:
            str_index_first = str(nearest_owf_fr_list[0])  # ?lk eleman? string'e çeviriyoruz
            str_index_second = str(nearest_owf_fr_list[1])  # ?kinci eleman? string'e çeviriyoruz
            str_index_third = str(nearest_owf_fr_list[2])  # Üçüncü eleman? string'e çeviriyoruz

            # ?lk eleman için
            if str_index_first in filled_surface_water_flow_rate_dict_monthly:
                relevant_owf_fr_df_first = filled_surface_water_flow_rate_dict_monthly[str_index_first]
                if len(relevant_owf_fr_df_first) > 0:
                    new_df.at[index, 'first_owf_fr'] = relevant_owf_fr_df_first.iloc[0, 0]  # ?lk sat?r?n ilk kolon de?eri
                if len(relevant_owf_fr_df_first.columns) > 1 and len(relevant_owf_fr_df_first) > 0:
                    new_df.at[index, 'first_owf_fr_lag_1'] = relevant_owf_fr_df_first.iloc[
                        0, 1]  # ?lk sat?r?n ikinci kolon de?eri
                if len(relevant_owf_fr_df_first.columns) > 2 and len(relevant_owf_fr_df_first) > 0:
                    new_df.at[index, 'first_owf_fr_rolling_mean_6_lag_1'] = relevant_owf_fr_df_first.iloc[
                        0, 2]  # ?lk sat?r?n üçüncü kolon de?eri
            else:
                print(f"Warning: Key '{str_index_first}' not found in filled_surface_water_flow_rate_dict_monthly")

            # ?kinci eleman için
            if str_index_second in filled_surface_water_flow_rate_dict_monthly:
                relevant_owf_fr_df_second = filled_surface_water_flow_rate_dict_monthly[str_index_second]
                if len(relevant_owf_fr_df_second) > 0:
                    new_df.at[index, 'second_owf_fr'] = relevant_owf_fr_df_second.iloc[0, 0]  # ?lk sat?r?n ilk kolon de?eri
                if len(relevant_owf_fr_df_second.columns) > 1 and len(relevant_owf_fr_df_second) > 0:
                    new_df.at[index, 'second_owf_fr_lag_1'] = relevant_owf_fr_df_second.iloc[
                        0, 1]  # ?lk sat?r?n ikinci kolon de?eri
                if len(relevant_owf_fr_df_second.columns) > 2 and len(relevant_owf_fr_df_second) > 0:
                    new_df.at[index, 'second_owf_fr_rolling_mean_6_lag_1'] = relevant_owf_fr_df_second.iloc[
                        0, 2]  # ?lk sat?r?n üçüncü kolon de?eri
            else:
                print(f"Warning: Key '{str_index_second}' not found in filled_surface_water_flow_rate_dict_monthly")

            # Üçüncü eleman için
            if str_index_third in filled_surface_water_flow_rate_dict_monthly:
                relevant_owf_fr_df_third = filled_surface_water_flow_rate_dict_monthly[str_index_third]
                if len(relevant_owf_fr_df_third) > 0:
                    new_df.at[index, 'third_owf_fr'] = relevant_owf_fr_df_third.iloc[0, 0]  # ?lk sat?r?n ilk kolon de?eri
                if len(relevant_owf_fr_df_third.columns) > 1 and len(relevant_owf_fr_df_third) > 0:
                    new_df.at[index, 'third_owf_fr_lag_1'] = relevant_owf_fr_df_third.iloc[
                        0, 1]  # ?lk sat?r?n ikinci kolon de?eri
                if len(relevant_owf_fr_df_third.columns) > 2 and len(relevant_owf_fr_df_third) > 0:
                    new_df.at[index, 'third_owf_fr_rolling_mean_6_lag_1'] = relevant_owf_fr_df_third.iloc[
                        0, 2]  # ?lk sat?r?n üçüncü kolon de?eri
            else:
                print(f"Warning: Key '{str_index_third}' not found in filled_surface_water_flow_rate_dict_monthly")
    else:
        print(f"Warning: No nearest_owf_fr list found for index '{index}'")



#  KONTROL
# kontrol için 140. sat?r (hangi aya denk geliyor bilmiyorum)
# import ast
#
# # Yeni kolonlar? ba?lat?yoruz
# new_df['first_rain'] = None
# new_df['first_rain_lag_1'] = None
# new_df['first_rain_rolling_mean_6_lag_1'] = None
# new_df['second_rain'] = None
# new_df['second_rain_lag_1'] = None
# new_df['second_rain_rolling_mean_6_lag_1'] = None
# new_df['third_rain'] = None
# new_df['third_rain_lag_1'] = None
# new_df['third_rain_rolling_mean_6_lag_1'] = None
#
# # Tüm indekslerde dola??yoruz
# for index in new_df.index:
#     # data DataFrame'inde hzbnr01 ile e?le?en nearest_rain listesini al?yoruz
#     nearest_rain_str = data.loc[data['hzbnr01'] == index, 'nearest_rain'].values
#
#     # E?er nearest_rain_str bo? de?ilse
#     if len(nearest_rain_str) > 0:
#         # nearest_rain listesinin string de?erini gerçek listeye dönü?türüyoruz
#         nearest_rain_list = ast.literal_eval(nearest_rain_str[0])  # Stringi listeye dönü?türüyoruz
#
#         # nearest_rain listesinin ilk, ikinci ve üçüncü elemanlar?n? al?yoruz
#         if len(nearest_rain_list) > 0:
#             str_index_first = str(nearest_rain_list[0])  # ?lk eleman? string'e çeviriyoruz
#             str_index_second = str(nearest_rain_list[1])  # ?kinci eleman? string'e çeviriyoruz
#             str_index_third = str(nearest_rain_list[2])  # Üçüncü eleman? string'e çeviriyoruz
#
#             # ?lk eleman için
#             if str_index_first in filled_rain_dict:
#                 relevant_rain_df_first = filled_rain_dict[str_index_first]
#                 if len(relevant_rain_df_first) > 140:
#                     new_df.at[index, 'first_rain'] = relevant_rain_df_first.iloc[
#                         140, 0]  # 140. sat?r?n ilk kolon de?eri
#                 if len(relevant_rain_df_first.columns) > 1 and len(relevant_rain_df_first) > 140:
#                     new_df.at[index, 'first_rain_lag_1'] = relevant_rain_df_first.iloc[
#                         140, 1]  # 140. sat?r?n ikinci kolon de?eri
#                 if len(relevant_rain_df_first.columns) > 2 and len(relevant_rain_df_first) > 140:
#                     new_df.at[index, 'first_rain_rolling_mean_6_lag_1'] = relevant_rain_df_first.iloc[
#                         140, 2]  # 140. sat?r?n üçüncü kolon de?eri
#             else:
#                 print(f"Warning: Key '{str_index_first}' not found in filled_rain_dict")
#
#             # ?kinci eleman için
#             if str_index_second in filled_rain_dict:
#                 relevant_rain_df_second = filled_rain_dict[str_index_second]
#                 if len(relevant_rain_df_second) > 140:
#                     new_df.at[index, 'second_rain'] = relevant_rain_df_second.iloc[
#                         140, 0]  # 140. sat?r?n ilk kolon de?eri
#                 if len(relevant_rain_df_second.columns) > 1 and len(relevant_rain_df_second) > 140:
#                     new_df.at[index, 'second_rain_lag_1'] = relevant_rain_df_second.iloc[
#                         140, 1]  # 140. sat?r?n ikinci kolon de?eri
#                 if len(relevant_rain_df_second.columns) > 2 and len(relevant_rain_df_second) > 140:
#                     new_df.at[index, 'second_rain_rolling_mean_6_lag_1'] = relevant_rain_df_second.iloc[
#                         140, 2]  # 140. sat?r?n üçüncü kolon de?eri
#             else:
#                 print(f"Warning: Key '{str_index_second}' not found in filled_rain_dict")
#
#             # Üçüncü eleman için
#             if str_index_third in filled_rain_dict:
#                 relevant_rain_df_third = filled_rain_dict[str_index_third]
#                 if len(relevant_rain_df_third) > 140:
#                     new_df.at[index, 'third_rain'] = relevant_rain_df_third.iloc[
#                         140, 0]  # 140. sat?r?n ilk kolon de?eri
#                 if len(relevant_rain_df_third.columns) > 1 and len(relevant_rain_df_third) > 140:
#                     new_df.at[index, 'third_rain_lag_1'] = relevant_rain_df_third.iloc[
#                         140, 1]  # 140. sat?r?n ikinci kolon de?eri
#                 if len(relevant_rain_df_third.columns) > 2 and len(relevant_rain_df_third) > 140:
#                     new_df.at[index, 'third_rain_rolling_mean_6_lag_1'] = relevant_rain_df_third.iloc[
#                         140, 2]  # 140. sat?r?n üçüncü kolon de?eri
#             else:
#                 print(f"Warning: Key '{str_index_third}' not found in filled_rain_dict")
#     else:
#         print(f"Warning: No nearest_rain list found for index '{index}'")
#
# # Sonuç olarak new_df'i görüntüleyelim
# new_df.head()

######################################33
"""
Buraday? k?salt?yorum hemen a?a??da
##################################### Groundwater
groundwater_all_coordinates = station_coordinates("Groundwater")

# Groundwater Level
groundwater_folder_path = os.path.join("Ehyd", "datasets_ehyd", "Groundwater", "Grundwasserstand-Monatsmittel")
groundwater_dict, groundwater_coordinates = to_dataframe(groundwater_folder_path, groundwater_all_coordinates)
groundwater_dict = process_dataframes(groundwater_dict)
to_global(groundwater_dict, prefix="gw_")

# Groundwater Temperature
groundwater_temperature_folder_path = os.path.join("Ehyd", "datasets_ehyd", "Groundwater", "Grundwassertemperatur-Monatsmittel")
groundwater_temperature_dict, groundwater_temperature_coordinates = to_dataframe(groundwater_temperature_folder_path, groundwater_all_coordinates)
groundwater_temperature_dict = process_dataframes(groundwater_temperature_dict)
to_global(groundwater_temperature_dict, prefix="gwt_")

# Creating new dictionaries according to requested stations
points = pd.read_csv(os.path.join("Ehyd", "datasets_ehyd", "gw_test_empty.csv"))
points_list = [col for col in points.columns[1:]]

filtered_groundwater_dict = filter_dataframes_by_points(groundwater_dict, points_list)
filtered_gw_coordinates = groundwater_coordinates[groundwater_coordinates['hzbnr01'].isin([int(i) for i in points_list])]

##################################### Precipitation
precipitation_coordinates = station_coordinates("Precipitation")

# Rain
rain_folder_path = os.path.join("Ehyd", "datasets_ehyd", "Precipitation", "N-Tagessummen")
rain_dict, rain_coordinates = to_dataframe(rain_folder_path, precipitation_coordinates)
rain_dict_monthly = process_dataframes(rain_dict)
to_global(rain_dict_monthly, prefix="rain_")

# Snow
snow_folder_path = os.path.join("Ehyd", "datasets_ehyd", "Precipitation", "NS-Tagessummen")
snow_dict, snow_coordinates = to_dataframe(snow_folder_path, precipitation_coordinates)
snow_dict = process_dataframes(snow_dict)
to_global(snow_dict, prefix="snow_")

##################################### Sources
sources_coordinates = station_coordinates("Sources")

# Flow Rate
source_flow_rate_path = os.path.join("Ehyd", "datasets_ehyd", "Sources", "Quellschüttung-Tagesmittel")
source_flow_rate_dict, source_flow_rate_coordinates = to_dataframe(source_flow_rate_path, sources_coordinates)
source_flow_rate_dict_monthly = process_dataframes(source_flow_rate_dict)
to_global(source_flow_rate_dict_monthly, prefix="source_fr_")

# Conductivity
conductivity_folder_path = os.path.join("Ehyd", "datasets_ehyd", "Sources", "Quellleitfähigkeit-Tagesmittel")
conductivity_dict, conductivity_coordinates = to_dataframe(conductivity_folder_path, sources_coordinates)
conductivity_dict_monthly = process_dataframes(conductivity_dict)
to_global(conductivity_dict_monthly, prefix="conductivity_")

# Source Temperature
source_temp_folder_path = os.path.join("Ehyd", "datasets_ehyd", "Sources", "Quellwassertemperatur-Tagesmittel")
source_temp_dict, source_temp_coordinates = to_dataframe(source_temp_folder_path, sources_coordinates)
source_temp_dict_monthly = process_dataframes(source_temp_dict)
to_global(source_temp_dict_monthly, prefix="source_temp_")

##################################### Surface Water

surface_water_coordinates = station_coordinates("Surface_Water")

# Surface Water Level
surface_water_level_folder_path = os.path.join("Ehyd", "datasets_ehyd", "Surface_Water", "W-Tagesmittel")
surface_water_level_dict, surface_water_level_coordinates = to_dataframe(surface_water_level_folder_path, surface_water_coordinates)
surface_water_level_dict_monthly = process_dataframes(surface_water_level_dict)
to_global(surface_water_level_dict_monthly, prefix="surface_water_level")

# Surface Water Temperature
surface_water_temp_folder_path = os.path.join("Ehyd", "datasets_ehyd", "Surface_Water", "WT-Monatsmittel")
surface_water_temp_dict, surface_water_temp_coordinates = to_dataframe(surface_water_temp_folder_path, surface_water_coordinates)
surface_water_temp_dict = process_dataframes(surface_water_temp_dict)
to_global(surface_water_temp_dict, prefix="surface_water_temp")

# Sediment
sediment_folder_path = os.path.join("Ehyd", "datasets_ehyd", "Surface_Water", "Schwebstoff-Tagesfracht")
sediment_dict, sediment_coordinates = to_dataframe(sediment_folder_path, surface_water_coordinates)  # daily version
sediment_dict = process_dataframes(sediment_dict)
to_global(sediment_dict, prefix="sediment_")

# Surface Water Flow Rate
surface_water_flow_rate_folder_path = os.path.join("Ehyd", "datasets_ehyd", "Surface_Water", "Q-Tagesmittel")
surface_water_flow_rate_dict, surface_water_flow_rate_coordinates = to_dataframe(surface_water_flow_rate_folder_path, surface_water_coordinates)
surface_water_flow_rate_dict_monthly = process_dataframes(surface_water_flow_rate_dict)
to_global(surface_water_flow_rate_dict_monthly, prefix="surface_water_fr_")

# geçici pkl
# write pickle
with open('sediment_dict.pkl', 'wb') as f:
    pickle.dump(sediment_dict, f)

with open('surface_water_level_dict_monthly.pkl', 'wb') as f:
    pickle.dump(surface_water_level_dict_monthly, f)

with open('surface_water_flow_rate_dict_monthly.pkl', 'wb') as f:
    pickle.dump(surface_water_flow_rate_dict_monthly, f)

with open('surface_water_temp_dict.pkl', 'wb') as f:
    pickle.dump(surface_water_temp_dict, f)

with open('filtered_groundwater_dict.pkl', 'wb') as f:
    pickle.dump(filtered_groundwater_dict, f)

with open('snow_dict.pkl', 'wb') as f:
    pickle.dump(snow_dict, f)

with open('conductivity_dict.pkl', 'wb') as f:
    pickle.dump(conductivity_dict_monthly, f)

with open('source_flow_rate_dict.pkl', 'wb') as f:
    pickle.dump(source_flow_rate_dict, f)

with open('source_temp_dict.pkl', 'wb') as f:
    pickle.dump(source_temp_dict, f)

with open('rain_dict.pkl', 'wb') as f:
    pickle.dump(rain_dict, f)

"""